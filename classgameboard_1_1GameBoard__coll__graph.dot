digraph "gameboard::GameBoard"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{gameboard::GameBoard\n||+ GameBoard()\l+ GameBoard()\l+ ImplementGetAllSpacesOccupiedBy()\l+ ImplementGetColor()\l+ ImplementGetType()\l+ ImplementCalcFinalMovesOf()\l+ IsInCheck()\l+ ImplementExecuteMove()\l+ IsCaptureMove()\l+ ImplementUndoMove()\l+ GetOccupantAt()\l+ map()\l+ ImplementAttachMoveCallback()\l+ ImplementIsDraw()\l+ move_log()\l- UpdateStateTracker()\l- SetOccupantAt()\l- AddToMoveLog()\l- RemoveFromMoveLog()\l- ViolatesRepeatRule()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Implements SpaceInfoProvider interface; stores piece positions, and exposes methods for calculating,..."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{SpaceInfoProvider\<\l GameBoard \>\n||+ GetAllSpacesOccupiedBy()\l+ GetColor()\l+ GetType()\l+ CalcFinalMovesOf()\l+ ExecuteMove()\l+ UndoMove()\l+ AttachMoveCallback()\l+ IsDraw()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSpaceInfoProvider.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< GameBoard \>" ,fontname="Helvetica"];
  Node3 [label="{SpaceInfoProvider\<\l ConcreteSpaceInfoProvider \>\n||+ GetAllSpacesOccupiedBy()\l+ GetColor()\l+ GetType()\l+ CalcFinalMovesOf()\l+ ExecuteMove()\l+ UndoMove()\l+ AttachMoveCallback()\l+ IsDraw()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSpaceInfoProvider.html",tooltip="CRTP interface with methods for obtaining information about gameboard::BoardSpace objects,..."];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -move_callbacks_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{vector\< function\< void\l(gameboard::ExecutedMove)\> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -move_log_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{map\< PieceColor, vector\l\< gameboard::ExecutedMove \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -moves_since_last_capture_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{int\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -board_map_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{array\< array\< GamePiece,\l kNumFiles \>, kNumRanks \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -move_calculator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{gameboard::MoveCalculator\n||+ MoveCalculator()\l+ IsOccupied()\l+ CalcMovesFrom()\l+ CalcAllMovesNoCheckTest()\l- ImplementCalcMovesFrom()\l- ImplementCalcAllMovesNoCheck\lTest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgameboard_1_1MoveCalculator.html",tooltip="Calculates legal gameboard::Move objects for of a gameboard::GameBoard with a particular state."];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -piece_moves_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{gameboard::PieceMoves\n||+ SoldierMoves()\l+ CannonMoves()\l+ ChariotMoves()\l+ HorseMoves()\l+ ElephantMoves()\l+ AdvisorMoves()\l+ FlyingGeneralMove()\l+ StandardGeneralMoves()\l+ GeneralMoves()\l- FwdDirection()\l- ExistsAndPassesColorTest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classgameboard_1_1PieceMoves.html",tooltip="Implements piece type dependent move rules; used by gameboard::MoveCalculator."];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -piece_dispatch_array_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{array\< MethodPtr_t,\l kNumPieceTypeVals \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
}
