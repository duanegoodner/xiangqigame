@startuml
!define RECTANGLE_PACKAGE
skinparam dpi 300
skinparam packageStyle rect
skinparam wrapWidth 400
left to right direction
scale 0.75





/' Objects '/

class BoardStateCoordinator <template<typename ConcreteBoardStateCoordinator, typename KeyType>> {
	+GetState() : ZobristKey_t
	+GetTrData(DepthType search_depth, MoveCountType access_index) : moveselection::TranspositionTableSearchResult
	+GetTrTableSize() : size_t
	+FullBoardStateCalc(const BoardMap_t& board_map) : void
	+RecordTrData(DepthType search_depth, moveselection::MinimaxResultType result_type, moveselection::EqualScoreMoves& similar_moves, MoveCountType access_index) : void
	+UpdateBoardState(const ExecutedMove& move) : void
	+UpdateMoveCounter() : void
}


class JsonUtility <template<typename ConcreteJsonUtility>> {
	+Export(T& object, const string file_path) : void
	+Export(piecepoints::BPOPointsSKeys& bpo_points, const string file_path) : void
	+Import(T& object, const string file_path) : void
	+Import(piecepoints::BPOPointsSKeys& bpo_points, const string file_path) : void
}


class MoveEvaluator <template<typename ConcreteMoveEvaluator>> {
	+SelectMove(MoveCollection& allowed_moves) : gameboard::Move
}


class PieceValueProvider <template<typename ConcretePieceValueProvider>> {
	+GetValueOfPieceAtPosition(PieceColor color, PieceType piece_type, BoardSpace space) : Points_t
}


class SpaceInfoProvider <template<typename ConcreteSpaceInfoProvider>> {
	+ExecuteMove(const Move& move) : ExecutedMove
	+CalcFinalMovesOf(PieceColor color) : MoveCollection
	+GetColor(const BoardSpace& space) : PieceColor
	+GetType(const BoardSpace& space) : PieceType
	+IsDraw() : bool
	+GetAllSpacesOccupiedBy(PieceColor color) : vector<BoardSpace>
	+AttachMoveCallback(function<void ( const ExecutedMove& )> callback) : void
	+UndoMove(const ExecutedMove& executed_move) : void
}


namespace piecepoints {
	class BPOPointsEKeys {
		+BPOPointsEKeys(TeamBasePoints_t black_base_input, TeamBasePoints_t red_base_offsets_input, TeamPointsEMap_t black_position_input, TeamPointsEMap_t red_position_offsets_input)
		+BPOPointsEKeys(BPOPointsSKeys external_spec)
		+ToGamePointsArray() : GamePointsArray_t
		+black_base_ : TeamBasePoints_t
		+red_base_offsets_ : TeamBasePoints_t
		+BlackNetPoints() : TeamPointsArray_t
		+RedNetPoints() : TeamPointsArray_t
		+black_position_ : TeamPointsEMap_t
		+red_position_offsets_ : TeamPointsEMap_t
	}

	class BPOPointsSKeys {
		+BPOPointsSKeys()
		+BPOPointsSKeys(BasePointsSMap_t black_base_input, BasePointsSMap_t red_base_offsets_input, TeamPointsSMap_t black_position_input, TeamPointsSMap_t red_position_offsets_input)
		+BPOPointsSKeys(const string& json_file_path)
		+ToBPOPointsEKeys() : BPOPointsEKeys
		+black_base_ : BasePointsSMap_t
		+red_base_offsets_ : BasePointsSMap_t
		+ToGamePointsArray() : GamePointsArray_t
		+ToGamePointsSmap() : GamePointsSMap_t
		+black_position_ : TeamPointsSMap_t
		+red_position_offsets_ : TeamPointsSMap_t
		-json_utility_ : unique_ptr<JsonUtility<jsonio::NlohmannJsonUtility>>
		+ToFile(string output_path) : void
	}

	class PiecePositionPoints {
		+PiecePositionPoints()
		+PiecePositionPoints(GamePointsArray_t game_points_array)
		+PiecePositionPoints(BPOPointsEKeys& bpo_points_ekeys)
		+PiecePositionPoints(BPOPointsSKeys& bpo_points_skeys)
		+PiecePositionPoints(string json_file)
		+points_array : GamePointsArray_t
		+PointsArraytoEMap() : GamePointsEMap_t
		+PointsArrayToSmap() : GamePointsSMap_t
		+ImplementGetValueOfPieceAtPosition(PieceColor color, PieceType piece_type, BoardSpace space) : Points_t
		+{static} TeamPointsArrayToEMap(TeamPointsArray_t team_array) : TeamPointsEMap_t
	}
}


namespace moveselection {
	class EqualScoreMoves {
		+move_collection() : MoveCollection
		+move_collection_ : MoveCollection
		+shared_score : Points_t
	}

	class MinimaxCalcResult {
		+MinimaxCalcResult()
		+MinimaxCalcResult(DepthType depth, MinimaxResultType type, EqualScoreMoves moves)
		+remaining_search_depth() : DepthType
		-remaining_search_depth_ : DepthType
		+equal_score_moves() : EqualScoreMoves
		-equal_score_moves_ : EqualScoreMoves
		-result_type_ : MinimaxResultType
		+moves() : MoveCollection
		+Score() : Points_t
		+result_type() : int
	}

	class MinimaxMoveEvaluator <template<typename ConcreteSpaceInfoProvider, typename ConcreteBoardStateCoordinator, typename ConcretePieceValueProvider>> {
		+MinimaxMoveEvaluator(PieceColor evaluating_player, DepthType starting_search_depth, ConcreteSpaceInfoProvider& game_board, uint32_t zkey_seed, const ConcretePieceValueProvider& game_position_points)
		-hash_calculator_ : ConcreteBoardStateCoordinator
		+hash_calculator() : ConcreteBoardStateCoordinator& {query}
		-game_position_points_ : ConcretePieceValueProvider
		-game_board_ : ConcreteSpaceInfoProvider&
		+starting_search_depth() : DepthType
		-starting_search_depth_ : DepthType
		-EvaluateEndOfGameLeaf(PieceColor cur_player, MinimaxResultType& result_type) : EqualScoreMoves
		-EvaluateNonWinLeaf(PieceColor cur_player, MinimaxResultType& result_type) : EqualScoreMoves
		-FinalizeNodeResult(MinimaxResultType& result_type, Points_t best_eval, MoveCollection best_moves, DepthType remaining_search_depth, SearchSummary& search_summary) : EqualScoreMoves
		-HandleEndOfGame(PieceColor cur_player, SearchSummary& search_summary, MinimaxResultType& result_type, DepthType remaining_search_depth) : EqualScoreMoves
		-HandleInternalNode(PieceColor cur_player, const MoveCollection& allowed_moves, DepthType& remaining_search_depth, Points_t& alpha, Points_t& beta, MinimaxResultType result_type, SearchSummary& search_summary, bool use_transposition_table) : EqualScoreMoves
		-HandleLeaf(PieceColor cur_player, SearchSummary& search_summary, MinimaxResultType& result_type, DepthType remaining_search_depth) : EqualScoreMoves
		-HandleTrTableHit(SearchSummary& search_summary, MinimaxResultType& result_type, TranspositionTableSearchResult& tr_table_search_result, DepthType remaining_search_depth) : EqualScoreMoves
		-MinimaxRec(const MoveCollection& allowed_moves, DepthType remaining_search_depth, Points_t alpha, Points_t beta, PieceColor cur_player, SearchSummary& search_summary, bool use_transposition_table) : EqualScoreMoves
		-RunTimedMinimax(const MoveCollection& allowed_moves, SearchSummary& search_summary, bool use_transposition_table) : EqualScoreMoves
		+ImplementSelectMove(MoveCollection& allowed_moves) : Move
		-SelectValidMove(const MoveCollection& allowed_moves) : Move
		-num_move_selections_ : MoveCountType
		-evaluating_player_ : PieceColor
		-GetPlayerTotal(PieceColor color) : Points_t
		-InitializedBestEval(PieceColor cur_player) : Points_t
		-RecursivelyVisitNodes(Move move, PieceColor cur_player, const MoveCollection& allowed_moves, DepthType remaining_search_depth, Points_t alpha, Points_t beta, SearchSummary& search_summary, bool use_transposition_table) : Points_t
		-move_sorter_ : PreSearchMoveSorter<ConcreteSpaceInfoProvider, ConcretePieceValueProvider>
		-RunFirstSearch(const MoveCollection& allowed_moves) : SearchSummary&
		-RunSecondSearch(const MoveCollection& allowed_moves) : SearchSummary&
		-IsImprovement(Points_t cur_eval, Points_t previous_best_eval, PieceColor cur_player) : bool
		-IsPrunable(Points_t& alpha, Points_t& beta, MinimaxResultType& result_type, PieceColor cur_player) : bool
		-search_summaries_ : moveselection::SearchSummaries
		+search_summaries() : moveselection::SearchSummaries&
		+KeySizeBits() : size_t
		-game_over_ : std::atomic<bool>
		+board_state_hex_str() : std::string
		+zkeys_seed() : uint32_t
		-GetMinimaxMoveAndStats(const MoveCollection& allowed_moves, SearchSummary& search_summary, bool use_transposition_table) : void
		-IncrementNumMoveSelections() : void
		-UpdateBestMoves(PieceColor cur_player, Move move, MoveCollection& best_moves, Points_t cur_eval, Points_t& previous_best_eval) : void
		-UpdatePruningParam(Points_t& alpha, Points_t& beta, Points_t cur_eval, PieceColor cur_player) : void
		-initialize_hash_calculator() : void
	}

	class PreSearchMoveSorter <template<typename ConcreteSpaceInfoProvider, typename ConcretePieceValueProvider>> {
		+PreSearchMoveSorter(ConcreteSpaceInfoProvider& game_board, ConcretePieceValueProvider& game_position_points)
		-game_position_points_ : ConcretePieceValueProvider&
		-game_board_ : ConcreteSpaceInfoProvider&
		+RateMove(Move move, PieceColor cur_player) : ScoredMove
		+GenerateRankedMoveList(PieceColor cur_player, const MoveCollection& cur_player_moves) : std::vector<ScoredMove>
	}

	class RandomMoveEvaluator <template<typename ConcreteSpaceInfoProvider>> {
		+RandomMoveEvaluator(PieceColor evaluating_player, ConcreteSpaceInfoProvider& game_board)
		-game_board_ : ConcreteSpaceInfoProvider&
		+ImplementSelectMove(MoveCollection& allowed_moves) : Move
		-evaluating_player_ : PieceColor
	}

	class ResultDepthCounts {
		+ResultDepthCounts(DepthType max_search_depth)
		+data() : ResultDepthCountsData_t
		-data_ : moveselection::ResultDepthCountsData_t
		+IncrementDataAt(MinimaxResultType result_type, DepthType search_depth) : void
	}

	class SearchSummary {
		+SearchSummary(DepthType max_search_depth, size_t tr_table_size_initial)
		+equal_score_moves() : EqualScoreMoves
		-equal_score_moves_ : EqualScoreMoves
		+selected_move() : Move
		-selected_move_ : Move
		-result_depth_counts_ : ResultDepthCounts
		-transposition_table_hits_ : ResultDepthCounts
		+GetResultDepthCounts() : ResultDepthCountsData_t
		+GetTranspositionTableHits() : ResultDepthCountsData_t
		+returned_illegal_move() : bool
		-returned_illegal_move_ : bool
		+num_collisions() : size_t
		-num_collisions_ : size_t
		+num_nodes() : size_t
		-num_nodes_ : size_t
		+tr_table_size_final() : size_t
		-tr_table_size_final_ : size_t
		+tr_table_size_initial() : size_t
		-tr_table_size_initial_ : size_t
		+time() : std::chrono::duration<double , std::nano>
		-time_ : std::chrono::duration<double, std::nano>
		+RecordNodeInfo(MinimaxResultType result_type, DepthType search_depth, const EqualScoreMoves& equal_score_moves) : void
		+RecordTrTableHit(TranspositionTableSearchResult& tr_table_search_result, DepthType remaining_search_depth) : void
		+SetSelectedMove(Move selected_move) : void
		+UpdateTranspositionTableHits(MinimaxResultType result_type, DepthType search_depth) : void
		+set_equal_score_moves(EqualScoreMoves equal_score_moves) : void
		+set_returned_illegal_move(bool status) : void
		+set_time(std::chrono::duration<double, std::nano> search_time) : void
		+set_tr_table_size_final(size_t tr_table_size_final) : void
	}

	class TranspositionTableSearchResult {
		+score_and_moves() : EqualScoreMoves
		+minimax_calc_result() : MinimaxCalcResult
		-minimax_calc_result_ : MinimaxCalcResult
		+moves() : MoveCollection
		+IsConsistentWith(const MoveCollection& allowed_moves) : bool
		+found() : bool
		-found_ : bool
		+known_collision() : bool
		-known_collision_ : bool
		+result_type() : int
		+set_found(bool status) : void
		+set_known_collision(bool status) : void
		+set_minimax_calc_result(MinimaxCalcResult result) : void
	}

	enum MinimaxResultType {
		kAlphaPrune
		kBetaPrune
		kDraw
		kEvaluatorLoses
		kEvaluatorWins
		kFullyEvaluatedNode
		kMax
		kMin
		kStandardLeaf
		kTrTableHit
		kUnknown
	}

	class ScoredMove {
		+move : Move
		+score : Points_t
	}

	class SearchSummaries {
		+NewExtraSearch(DepthType search_depth, MoveCountType search_number, size_t tr_table_size_current) : SearchSummary&
		+NewFirstSearch(DepthType search_depth, size_t tr_table_size_initial) : SearchSummary&
		+extra_searches : std::map<MoveCountType, SearchSummary>
		+first_searches : std::vector<SearchSummary>
	}
}


namespace jsonio {
	class NlohmannJsonUtility {
		-ImportToSerializedJson(const std::string file_path) : nlohmann::json
		-Serialize(piecepoints::BPOPointsSKeys& bpo_points) : nlohmann::json
		-Deserialize(nlohmann::json serialized_json, piecepoints::BPOPointsSKeys& bpo_points) : void
		-ExportSerializedJson(nlohmann::json serialized_json, const std::string file_path) : void
		+ImplementExport(T& object, const std::string file_path) : void
		+ImplementExport(piecepoints::BPOPointsSKeys& bpo_points, const std::string file_path) : void
		+ImplementImport(T& object, const std::string file_path) : void
		+ImplementImport(piecepoints::BPOPointsSKeys& bpo_points, const std::string file_path) : void
	}
}


namespace gameboard {
	class GameBoard {
		+GameBoard()
		+GameBoard(const BoardMapInt_t starting_board)
		-vector<function<void(const ExecutedMove &)
		-board_map_ : BoardMap_t
		+map() : BoardMap_t& {query}
		+ImplementExecuteMove(const Move& move) : ExecutedMove
		+GetOccupantAt(const BoardSpace& space) : GamePiece {query}
		-move_calculator_ : MoveCalculator
		+ImplementCalcFinalMovesOf(PieceColor color) : MoveCollection
		-moves_since_last_capture_ : MoveCountType
		+ImplementGetColor(const BoardSpace& space) : PieceColor {query}
		+ImplementGetType(const BoardSpace& space) : PieceType {query}
		+ImplementIsDraw() : bool
		+IsCaptureMove(const ExecutedMove& executed_move) : bool {query}
		+IsInCheck(PieceColor color) : bool
		-ViolatesRepeatRule(PieceColor color) : bool
		+move_log() : std::map<PieceColor , vector<ExecutedMove>>& {query}
		-move_log_ : std::map<PieceColor, vector<ExecutedMove>>
		+ImplementGetAllSpacesOccupiedBy(PieceColor color) : vector<BoardSpace> {query}
		-AddToMoveLog(const ExecutedMove& executed_move) : void
		+ImplementAttachMoveCallback(const function<void ( const ExecutedMove& )>& callback) : void
		+ImplementUndoMove(const ExecutedMove& executed_move) : void
		-RemoveFromMoveLog(const ExecutedMove& executed_move) : void
		-SetOccupantAt(const BoardSpace& space, GamePiece piece) : void
		-UpdateStateTracker(const ExecutedMove& executed_move) : void
	}

	class MoveCalculator {
		+MoveCalculator()
		+CalcAllMovesNoCheckTest(PieceColor color, const BoardMap_t& board_map) : MoveCollection
		-ImplementCalcAllMovesNoCheckTest(PieceColor color, const BoardMap_t& board_map) : MoveCollection
		-piece_dispatch_array_ : PieceDispatchArray_t
		-piece_moves_ : PieceMoves
		+IsOccupied(const BoardMap_t& board_map, const BoardSpace& space) : bool
		+CalcMovesFrom(const BoardSpace space, MoveCollection& team_moves, const BoardMap_t& board_map) : void
		-ImplementCalcMovesFrom(const BoardSpace space, MoveCollection& team_moves, const BoardMap_t& board_map) : void
	}

	class PieceMoves {
		-{static} FwdDirection(PieceColor color) : BoardDirection
		-{static} ExistsAndPassesColorTest(const BoardMap_t& board_map, const BoardSpace& space, PieceColor moving_piece_color) : bool
		+AdvisorMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+CannonMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+ChariotMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+ElephantMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+FlyingGeneralMove(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+GeneralMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+HorseMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+SoldierMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
		+StandardGeneralMoves(const BoardMap_t& board_map, PieceColor color, const BoardSpace& space, MoveCollection& team_moves) : void
	}

	enum PieceColor {
		kBlk
		kNul
		kRed
	}

	enum PieceType {
		kAdv
		kCan
		kCha
		kEle
		kGen
		kHor
		kNnn
		kSol
	}

	class BoardDirection {
		+file : BoardIdx_t
		+rank : BoardIdx_t
	}

	class BoardSpace {
		+file : BoardIdx_t
		+rank : BoardIdx_t
		+operator+(const BoardDirection direction) : BoardSpace {query}
		+IsInCastleOf(const PieceColor color) : bool {query}
		+IsInHomelandOf(const PieceColor color) : bool {query}
		+IsOnBoard() : bool {query}
		+operator!=(const BoardSpace other) : bool {query}
		+operator==(const BoardSpace other) : bool {query}
	}

	class CastleEdges {
		+max_file : BoardIdx_t
		+max_rank : BoardIdx_t
		+min_file : BoardIdx_t
		+min_rank : BoardIdx_t
	}

	class ExecutedMove {
		+spaces : Move
		+moves_since_last_capture : MoveCountType
		+operator==(const ExecutedMove other) : bool
		+destination_piece : gameboard::GamePiece
		+moving_piece : gameboard::GamePiece
	}

	class GamePiece {
		+GamePiece()
		+GamePiece(int int_piece)
		+GamePiece(PieceType type, PieceColor color)
		+piece_color : PieceColor
		+piece_type : PieceType
		+operator==(const GamePiece& other) : bool {query}
	}

	class Move {
		+operator==(const Move other) : bool
		+end : gameboard::BoardSpace
		+start : gameboard::BoardSpace
	}

	class MoveCollection {
		+MoveCollection()
		+MoveCollection(vector<Move> my_moves)
		+MoveCollection(size_t reserve_size)
		+SelectRandom() : Move
		+ContainsAnyMoveNotIn(const MoveCollection& other) : bool {query}
		+ContainsDestination(const gameboard::BoardSpace& space) : bool
		+ContainsMove(const Move& move) : bool {query}
		+IsEmpty() : bool {query}
		+Size() : size_t {query}
		+moves : vector<Move>
		+Append(Move move) : void
		+Concat(vector<Move> other_moves) : void
		+Concat(MoveCollection other) : void
	}
}


namespace boardstate {
	class PseudoRandomKeyGenerator <template<typename IntType>> {
		+PseudoRandomKeyGenerator()
		+PseudoRandomKeyGenerator(uint32_t seed)
		+GenerateKey() : IntType
		-prng_ : std::mt19937
		+seed() : std::random_device::result_type
		-seed_ : std::random_device::result_type
	}

	class RandomKeyGenerator <template<typename IntType>> {
		+GenerateKey() : IntType
		-rd_ : std::random_device
	}

	class TranspositionTable <template<typename KeyType, size_t NumConfKeys>> {
		+NumIdleMovesAt(KeyType board_state) : MoveCountType
		-NumMovesSinceLastUseOf(const TranspositionTableEntry<KeyType, NumConfKeys>& tr_table_entry) : MoveCountType
		-move_counter_ : MoveCountType
		+GetDataAt(KeyType primary_board_state, DepthType remaining_search_depth, std::array<KeyType, NumConfKeys> expected_keys) : moveselection::TranspositionTableSearchResult
		+size() : size_t
		-data_ : std::unordered_map<KeyType, TranspositionTableEntry<KeyType, NumConfKeys>>
		+IncrementMoveCounter() : void
		+RecordData(KeyType primary_board_state, DepthType search_depth, moveselection::MinimaxResultType result_type, moveselection::EqualScoreMoves& similar_moves, const std::array<KeyType, NumConfKeys>& confirmation_keys) : void
	}

	class TranspositionTableEntry <template<typename KeyType, size_t NumConfKeys>> {
		+TranspositionTableEntry(moveselection::MinimaxCalcResult minimax_calc_result, std::array<KeyType, NumConfKeys> confirmation_keys, MoveCountType last_access_index)
		+remaining_search_depth() : DepthType
		+last_access_index() : MoveCountType
		-last_access_index_ : MoveCountType
		+ConfirmationKeysMatchExpected(std::array<KeyType, NumConfKeys> expected_keys) : bool
		+minimax_calc_result() : moveselection::MinimaxCalcResult
		-minimax_calc_result_ : moveselection::MinimaxCalcResult
		+confirmation_keys() : std::array<KeyType , NumConfKeys>
		-confirmation_keys_ : std::array<KeyType, NumConfKeys>
		+set_last_access_index(MoveCountType last_access_index) : void
	}

	class TranspositionTableGuard {
		+TranspositionTableGuard()
		-tr_table_mutex_ : mutable std::mutex
		+GetExclusiveLock() : std::unique_lock<std::mutex>
	}

	class TranspositionTablePruner <template<typename KeyType, size_t NumConfKeys>> {
		+TranspositionTablePruner(TranspositionTable<KeyType, NumConfKeys>& tr_table, TranspositionTableGuard& tr_table_guard)
		+~TranspositionTablePruner()
		-tr_table_ : TranspositionTable<KeyType, NumConfKeys>&
		-tr_table_guard_ : TranspositionTableGuard&
		-keep_running_ : std::atomic<bool>
		-pruning_thread_ : std::thread
		-RepeatedlyPrune() : void
		+Start() : void
		+Stop() : void
		-ThreadSafePruneEntry() : void
		-UnsafePruneEntry() : void
	}

	class ZobristCalculator <template<typename KeyType>> {
		+ZobristCalculator(uint32_t seed)
		-{static} CreateGameZarray(PseudoRandomKeyGenerator<KeyType>& key_generator) : GameZarray_t
		+zarray() : GameZarray_t {query}
		+GetHashValueAt(PieceColor color, PieceType piece_type, BoardSpace space) : KeyType
		+board_state() : KeyType {query}
		-board_state_ : KeyType
		+turn_key() : KeyType {query}
		-turn_key_ : KeyType
		-zarray_ : array<TeamZarray_t, 2>
		+seed() : uint32_t {query}
		-seed_ : uint32_t
		-FullBoardStateCalInternal(const gameboard::BoardMap_t& board_map) : void
		+FullBoardStateCalc(const gameboard::BoardMap_t& board_map) : void
		+UpdateBoardState(const gameboard::ExecutedMove& executed_move) : void
		-UpdateBoardStateInternal(const gameboard::ExecutedMove& executed_move) : void
	}

	class ZobristComponent <template<typename KeyType, size_t NumConfKeys>> {
		-ZobristComponent(std::mt19937 prng)
		+ZobristComponent(const ZobristCalculator<KeyType> primary_calculator, const std::array<ZobristCalculator<KeyType>, NumConfKeys>& confirmation_calculators)
		+ZobristComponent(uint32_t prng_seed)
		+primary_board_state() : KeyType
		+primary_calculator_seed() : KeyType
		-primary_calculator_ : ZobristCalculator<KeyType>
		+confirmation_board_states() : std::array<KeyType , NumConfKeys>
		-confirmation_board_states_internal() : std::array<KeyType , NumConfKeys>
		-confirmation_calculators_ : std::array<ZobristCalculator<KeyType>, NumConfKeys>
		+confirmation_calculator_seeds() : std::array<uint32_t , NumConfKeys> {query}
		-confirmation_calculator_seeds_internal() : std::array<uint32_t , NumConfKeys> {query}
		-prng_seed_ : std::optional<uint32_t>
		+primary_board_state_hex_str() : std::string {query}
		+prng_seed() : uint32_t
		+FullBoardStateCalc(const BoardMap_t& board_map) : void
		-FullBoardStateCalcInternal(const BoardMap_t& board_map) : void
		+UpdateBoardStates(const ExecutedMove& executed_move) : void
		-UpdateBoardStatesInternal(const ExecutedMove& executed_move) : void
	}

	class ZobristCoordinator <template<typename KeyType, size_t NumConfKeys>> {
		+ZobristCoordinator(ZobristComponent<KeyType, NumConfKeys> zobrist_component)
		+ZobristCoordinator(uint32_t primary_seed, std::array<uint32_t, NumConfKeys> confirmation_seeds)
		+ZobristCoordinator(uint32_t prng_seed)
		+ImplementGetState() : KeyType
		-tr_table_ : TranspositionTable<KeyType, NumConfKeys>
		-tr_table_guard_ : TranspositionTableGuard
		-tr_table_pruner_ : TranspositionTablePruner<KeyType, NumConfKeys>
		-zobrist_component_ : ZobristComponent<KeyType, NumConfKeys>
		+ImplementGetTrData(DepthType search_depth, MoveCountType access_index) : moveselection::TranspositionTableSearchResult
		+ImplementGetTrTableSize() : size_t
		+board_state_hex_str() : std::string
		+zkeys_seed() : uint32_t
		+ImplementFullBoardStateCalc(const BoardMap_t& board_map) : void
		+ImplementRecordTrData(DepthType search_depth, moveselection::MinimaxResultType result_type, moveselection::EqualScoreMoves& similar_moves, MoveCountType access_index) : void
		+ImplementUpdateBoardState(const ExecutedMove& executed_move) : void
		+ImplementUpdateMoveCounter() : void
	}
}





/' Inheritance relationships '/

BoardStateCoordinator <|-- boardstate.ZobristCoordinator


JsonUtility <|-- jsonio.NlohmannJsonUtility


MoveEvaluator <|-- moveselection.MinimaxMoveEvaluator


MoveEvaluator <|-- moveselection.RandomMoveEvaluator


PieceValueProvider <|-- piecepoints.PiecePositionPoints


SpaceInfoProvider <|-- gameboard.GameBoard





/' Aggregation relationships '/

gameboard.ExecutedMove "2" *-- gameboard.GamePiece


gameboard.ExecutedMove *-- gameboard.Move


gameboard.GameBoard *-- gameboard.MoveCalculator


gameboard.GameBoard *-- gameboard.PieceColor


gameboard.GamePiece *-- gameboard.PieceColor


gameboard.GamePiece *-- gameboard.PieceType


moveselection.MinimaxCalcResult *-- moveselection.EqualScoreMoves


moveselection.MinimaxCalcResult *-- moveselection.MinimaxResultType


moveselection.MinimaxMoveEvaluator *-- moveselection.PreSearchMoveSorter


moveselection.MinimaxMoveEvaluator *-- moveselection.SearchSummaries


gameboard.Move "2" *-- gameboard.BoardSpace


gameboard.MoveCalculator *-- gameboard.PieceMoves


gameboard.MoveCollection *-- gameboard.Move


moveselection.SearchSummaries "2" *-- moveselection.SearchSummary


moveselection.SearchSummary *-- moveselection.EqualScoreMoves


moveselection.SearchSummary "2" *-- moveselection.ResultDepthCounts


boardstate.TranspositionTable *-- boardstate.TranspositionTableEntry


boardstate.TranspositionTablePruner *-- boardstate.TranspositionTable


boardstate.TranspositionTablePruner *-- boardstate.TranspositionTableGuard


moveselection.TranspositionTableSearchResult *-- moveselection.MinimaxCalcResult


boardstate.ZobristComponent "2" *-- boardstate.ZobristCalculator


boardstate.ZobristCoordinator *-- boardstate.TranspositionTable


boardstate.ZobristCoordinator *-- boardstate.TranspositionTableGuard


boardstate.ZobristCoordinator *-- boardstate.TranspositionTablePruner


boardstate.ZobristCoordinator *-- boardstate.ZobristComponent






/' Nested objects '/



@enduml
